Translate Webpage by google.alfredworkflowのメモ

機能：
選択中もしくはクリップボードのURLのサイトを日本語に翻訳する
※ワークフローのArg and Vals,Conditionalユーティリティを利用するサンプルです


インストール：
　1.alfredworkflowをダウンロード
　2.ファイルをダブルクリックしてワークフローに登録

使い方：
　翻訳したのページのURLを選択して⌘J（ホットキーはご自身で設定が必要です）

　
開発メモ：

1.ページ翻訳のコア
　google翻訳を利用します
  最終的なURLは下記なので、U=の部分に翻訳したいURLを入れればよさそうですね
　https://translate.google.com/translate?sl=en&tl=ja&u=　


2．選択中の文字列を取得する
　HOTKEYワークフローの設定で実装しています
　HOTKEYの設定タブのArgumentでSelection in macOSを選択します


3.クリップボードの内容を取得する（特定の変数をスクリプトに渡す）
　Alfredワークフローで利用できる変数の{clipboard:0}を利用します
　数字は0が直近のクリップボード、1が1つ前、2が2つ前というように履歴参照ができます

　シェルスクリプトで利用できるようにArg and Valsユーティリティを利用します
　Variables:に下記の項目を追加します。
　Name:clipboard Value:{clipboard:0}　
　こうすると、後続のワークフローで＄clipboardとして利用できます

　※選択アイテムがない場合にクリップボードを取得するロジックを作っていますが、
　　実際には、直近のクリップボードにURLかどうか覚えていないので実用的ではないです
　　クリップボードの練習です


4.正しいURLかどうか確認する
　AlfredのConditionalユーティリティを利用します
　このユーティリティは正規表現を条件に指定できるので、URLのチェックに使ってみました
　ネットから下記の正規表現を拾ってきましたが、ちんぷんかんぷんですっ！
　https?://[\w!\?/\+\-_~=;\.,\*&@#\$%\(\)'\[\]]+ 

　あとConditionalユーティリティでちょっと躓きました
　thenとelseの後にテキストボックスがあるので、後続に受け渡すパラメータを描くのかと思ったりしましたが違いました
　ワークフローをわかりやすくするためのテキストです
　今回は、URLパターンにマッチしたら『翻訳』、アンマッチなら『エラー』としています

　ワークフォローの緑色のオブジェクトを開いてみてくださいね


5.翻訳させる
　Open URLを使ってページ翻訳をしています。英語→日本語固定です
  直前のスクリプトで対象ページのURLをechoして{query}に受け渡しています
　ちなみにですが、日本語ページを英語ページに変えるほうが面白いですね


6.エラー処理をつける　
　HOTKEYスタートなので、エラーの際のフィードバックとしてLarge Typeをつかってみました


背景：
　最近alfredのhelpページやフォーラムを見たりするのですが、google翻訳では、
　トップページのボックスにULRを記述する→翻訳後のボックスに同じURLが青く表示される→
　それをクリックすると新たなタブが開いてページが翻訳されるということで、ちょっと手間
　一発起動させたく作ってみました

　はじめは選択したテキストやクリップボードからの起動をさせていたのですが、
　テストをしてみると、基本クリップボードから使うことはなく、
　テキストの選択もブラウザーのURLバーを全選択することがほとんどです
　それじゃあ、ということで開いてるブラウザーからURLを取得するように変更しましょう
　以下、追加です


追加機能：
　・HOTKEY『⌥s』を押すとsafariで開いているページを翻訳
　・HOTKEY『⌥c』を押すとchromeで開いているページを翻訳
（ホットキーはご自身での設定が必要です）

　
追加開発メモ：

1.ブラウザで表示されているURLを取得する

 AppleScriptを利用します。例のアプリケーションにTellする独特な言語です
 osascriptコマンドを経由させるとシェルスクリプトで利用できます
 以下の構文です

 osascript -e 'AppleScript'

 さて具体的に、Safariで表示しているURLを取得するには以下でOK
 
 osascript -e 'tell app "safari" to get the url of the current tab of window 1'

 もうひとつChromeの場合はこうです

 osascript -e 'tell app "google chrome" to get the url of the active tab of window 1'

 そしてこれらのosascriptコマンドの結果をOpen URLに受け渡すためバックスラッシュ(`)で囲ってエコーしています
 多層ネストスクリプト！　これは世界がひろがりますね　　

 ※Alfred4がアプリケーションへアクセスすることを許可する必要があります
  システム環境設定→セキュリティとプライバシー→プライバシータブ→オートメーション
  Alfred4にsafariやgoogle chromeを制御する許可を付与
  

ver1.1(2021-04-04)：
   シェルスクリプトをbashからzshに変更



